{"config":{"lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 Python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u00b6 \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u00b6 Coding Interview University - \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0443\u0440\u0441, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u043c, \u0433\u043e\u0442\u043e\u0432\u0438\u0432\u0448\u0438\u043c\u0441\u044f \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0432 Google. \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u043e\u0431\u0440\u0430\u043b 137k \u0437\u0432\u0451\u0437\u0434. awesomne-coding-interview - \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. Python Cheatsheet \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a \u043f\u043e Python. Real Python - \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438 \u043f\u043e core-Python, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. awesome-python - \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0442.\u0434.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#python-","text":"","title":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 Python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430"},{"location":"#_1","text":"Coding Interview University - \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0443\u0440\u0441, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u043c, \u0433\u043e\u0442\u043e\u0432\u0438\u0432\u0448\u0438\u043c\u0441\u044f \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0432 Google. \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u043e\u0431\u0440\u0430\u043b 137k \u0437\u0432\u0451\u0437\u0434. awesomne-coding-interview - \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. Python Cheatsheet \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a \u043f\u043e Python. Real Python - \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438 \u043f\u043e core-Python, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. awesome-python - \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0442.\u0434.","title":"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b"},{"location":"example/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u00b6 \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MkDocs \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439. \u0410\u043d\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b \u00b6 $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 termynal . \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u00b6 Note \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043e\u0434\u0430 \u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. Tip \u0422\u0435\u043a\u0441\u0442 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438. Check \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c. Warning \u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f . Danger \u041e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c!. \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u00b6 import sys if __name__ == '__main__' : sys . stdout . write ( \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\" ) \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a: import sys if __name__ == '__main__' : msg : str = \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \\n \" sys . stdout . write ( msg ) \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432 . Mermaid-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u00b6 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432"},{"location":"example/#mkdocs","text":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MkDocs \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439.","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432"},{"location":"example/#_1","text":"$ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 termynal .","title":"\u0410\u043d\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b"},{"location":"example/#_2","text":"Note \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043e\u0434\u0430 \u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. Tip \u0422\u0435\u043a\u0441\u0442 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438. Check \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c. Warning \u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f . Danger \u041e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c!.","title":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438"},{"location":"example/#_3","text":"import sys if __name__ == '__main__' : sys . stdout . write ( \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\" ) \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a: import sys if __name__ == '__main__' : msg : str = \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \\n \" sys . stdout . write ( msg ) \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432 .","title":"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430"},{"location":"example/#mermaid-","text":"graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users","title":"Mermaid-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"content/check/","text":"","title":"Check"},{"location":"content/questions/","text":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u00b6 \u0412\u0437\u044f\u0442\u043e \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0430\u0445 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 All Algorithms Implemented in Python All Algorithms Implemented in JavaScript Comprehensive list of interview questions of top tech companies A great list of Java interview questions Algorithms playground for common interview questions written in Ruby EKAlgorithms contains some well known CS algorithms & data structures Five programming problems every Software Engineer should be able to solve in less than 1 hour Top 10 Algorithms for Coding Interview Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top Algorithms Questions by Topics Daily Coding Interview Practice \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 Data Structures Implemented in Python Data Structures Introductions Common Python Data Structures (Guide) Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top 50 Data Structure Interview Questions from Career Guru \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern Design Patterns for Humans\u2122 - An ultra-simplified explanation Design Patterns in Python \u0413\u0430\u0439\u0434 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c \u043e\u0442 Refactoring.Guru \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u00b6 \u0413\u0430\u0439\u0434 \u043f\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0443 \u043e\u0442 Refactoring.Guru Python \u00b6 Avito - \u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0430 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0443\u043c\u0435\u0435\u0442 \u0432 Python. pythonist.ru - \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (3 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044f\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438) 26 Essential Python Interview Questions from Adeva 50 Python interview questions and answers 11 Essential Python Interview Questions from Toptal A listing of questions that could potentially be asked for a python job listing Interview Questions for both beginners and experts Interview Cake Python Interview Questions Python Frequently Asked Questions (Programming) Python interview questions collected by Reddit users Top 25 Python Interview Questions from Career Guru Python Interview 10 questions from Corey Schafer Python interview questions. Part I. Junior Python interview questions. Part II. Middle Python interview questions. Part III. Senior Python Interview Questions and Answers (2019) 100 Python Interview Questions - Quick Refresher Django \u00b6 Some abstract interview questions for Python/Django developers Some Django basic interview questions to establish the basic level of the candidates Top 16 Django Interview Questions for both freshers and experienced developers \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 PostgreSQL \u00b6 13 PostgreSQL Interview Q&A Frequently Asked Basic PostgreSQL Interview Questions and Answers PostgreSQL Interview Preparation Guide PostgreSQL Interview Q&A from CoolInterview.com SQL \u00b6 10 Frequently asked SQL Query Interview Questions 45 Essential SQL Interview Questions from Toptal Common Interview Questions and Answers General Interview Questions and Answers Schema, Questions & Solutions for SQL Exercising SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL SQL Interview Questions CHEAT SHEET \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 Memcached \u00b6 Memcached Interview Questions from Javapoint Memcached Interview Questions from Wisdomjobs Redis \u00b6 Redis Interview Questions from Javapoint Redis Interview Questions from Wisdomjobs Redis Interview Questions from Career Guru \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0421\u0438\u0441\u0442\u0435\u043c\u044b \u00b6 Linux \u00b6 10 Job Interview Questions for Linux System Administrators from Linux.com 10 Useful Random Linux Interview Questions and Answers 11 Basic Linux Interview Questions and Answers 11 Essential Linux Interview Questions from Toptal Some basic Linux questions from ComputerNetworkingNotes.com Top 30 Linux System Admin Interview Questions & Answers Top 50 Linux Interview Questions from Career Guru Linux System Administrator/DevOps Interview Questions 278 Test Questions and Answers for *nix System Administrators Linux Interview Questions - Quick Refresher \u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f \u00b6 Common interview questions and puzzles solved in a number of languages Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions Interview questions solved in python \u0421\u0435\u0442\u0438 \u00b6 Top 100 Networking Interview Questions & Answers from Career Guru \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u0449\u0438\u0435 \u0442\u0435\u043c\u044b \u0434\u043b\u044f Backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u00b6 Some simple questions to interview potential backend candidates An Annotated List of Backend Developer Technical Interview Questions An Annotated List of DevOps Technical Interview Questions Docker \u00b6 Docker Interview Questions Top Docker Interview Questions You Must Prepare In 2019 Top Docker Interview Questions And Answers DOCKER (SOFTWARE) INTERVIEW QUESTIONS & ANSWERS 30 Docker Interview Questions and Answers in 2019 GraphQl \u00b6 8 GraphQl Interview Questions To Know How to GraphQl - Common Questions","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"content/questions/#_1","text":"\u0412\u0437\u044f\u0442\u043e \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0430\u0445 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430.","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"content/questions/#_2","text":"All Algorithms Implemented in Python All Algorithms Implemented in JavaScript Comprehensive list of interview questions of top tech companies A great list of Java interview questions Algorithms playground for common interview questions written in Ruby EKAlgorithms contains some well known CS algorithms & data structures Five programming problems every Software Engineer should be able to solve in less than 1 hour Top 10 Algorithms for Coding Interview Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top Algorithms Questions by Topics Daily Coding Interview Practice","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/questions/#_3","text":"Data Structures Implemented in Python Data Structures Introductions Common Python Data Structures (Guide) Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top 50 Data Structure Interview Questions from Career Guru","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/questions/#_4","text":"Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern Design Patterns for Humans\u2122 - An ultra-simplified explanation Design Patterns in Python \u0413\u0430\u0439\u0434 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c \u043e\u0442 Refactoring.Guru","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/questions/#_5","text":"\u0413\u0430\u0439\u0434 \u043f\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0443 \u043e\u0442 Refactoring.Guru","title":"\u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433"},{"location":"content/questions/#python","text":"Avito - \u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0430 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0443\u043c\u0435\u0435\u0442 \u0432 Python. pythonist.ru - \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (3 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044f\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438) 26 Essential Python Interview Questions from Adeva 50 Python interview questions and answers 11 Essential Python Interview Questions from Toptal A listing of questions that could potentially be asked for a python job listing Interview Questions for both beginners and experts Interview Cake Python Interview Questions Python Frequently Asked Questions (Programming) Python interview questions collected by Reddit users Top 25 Python Interview Questions from Career Guru Python Interview 10 questions from Corey Schafer Python interview questions. Part I. Junior Python interview questions. Part II. Middle Python interview questions. Part III. Senior Python Interview Questions and Answers (2019) 100 Python Interview Questions - Quick Refresher","title":"Python"},{"location":"content/questions/#django","text":"Some abstract interview questions for Python/Django developers Some Django basic interview questions to establish the basic level of the candidates Top 16 Django Interview Questions for both freshers and experienced developers","title":"Django"},{"location":"content/questions/#_6","text":"","title":"\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/questions/#postgresql","text":"13 PostgreSQL Interview Q&A Frequently Asked Basic PostgreSQL Interview Questions and Answers PostgreSQL Interview Preparation Guide PostgreSQL Interview Q&A from CoolInterview.com","title":"PostgreSQL"},{"location":"content/questions/#sql","text":"10 Frequently asked SQL Query Interview Questions 45 Essential SQL Interview Questions from Toptal Common Interview Questions and Answers General Interview Questions and Answers Schema, Questions & Solutions for SQL Exercising SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL SQL Interview Questions CHEAT SHEET","title":"SQL"},{"location":"content/questions/#_7","text":"","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/questions/#memcached","text":"Memcached Interview Questions from Javapoint Memcached Interview Questions from Wisdomjobs","title":"Memcached"},{"location":"content/questions/#redis","text":"Redis Interview Questions from Javapoint Redis Interview Questions from Wisdomjobs Redis Interview Questions from Career Guru","title":"Redis"},{"location":"content/questions/#_8","text":"","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0421\u0438\u0441\u0442\u0435\u043c\u044b"},{"location":"content/questions/#linux","text":"10 Job Interview Questions for Linux System Administrators from Linux.com 10 Useful Random Linux Interview Questions and Answers 11 Basic Linux Interview Questions and Answers 11 Essential Linux Interview Questions from Toptal Some basic Linux questions from ComputerNetworkingNotes.com Top 30 Linux System Admin Interview Questions & Answers Top 50 Linux Interview Questions from Career Guru Linux System Administrator/DevOps Interview Questions 278 Test Questions and Answers for *nix System Administrators Linux Interview Questions - Quick Refresher","title":"Linux"},{"location":"content/questions/#_9","text":"Common interview questions and puzzles solved in a number of languages Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions Interview questions solved in python","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f"},{"location":"content/questions/#_10","text":"Top 100 Networking Interview Questions & Answers from Career Guru","title":"\u0421\u0435\u0442\u0438"},{"location":"content/questions/#backend-","text":"Some simple questions to interview potential backend candidates An Annotated List of Backend Developer Technical Interview Questions An Annotated List of DevOps Technical Interview Questions","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u0449\u0438\u0435 \u0442\u0435\u043c\u044b \u0434\u043b\u044f Backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430"},{"location":"content/questions/#docker","text":"Docker Interview Questions Top Docker Interview Questions You Must Prepare In 2019 Top Docker Interview Questions And Answers DOCKER (SOFTWARE) INTERVIEW QUESTIONS & ANSWERS 30 Docker Interview Questions and Answers in 2019","title":"Docker"},{"location":"content/questions/#graphql","text":"8 GraphQl Interview Questions To Know How to GraphQl - Common Questions","title":"GraphQl"},{"location":"content/algorithms/implementations/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u00b6","title":"Implementations"},{"location":"content/algorithms/implementations/#_1","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/tasks/","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u00b6 https://m.habr.com/ru/company/yandex/blog/340784/ https://m.habr.com/ru/company/yandex/blog/337690/ \u0415\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u043f\u043e\u043c\u043d\u044e: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getPrimes(n) // \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 2 \u0434\u043e n; \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0443\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438; check(\"{()}[]\") // true check(\"{[}]\") // false 3. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e sum \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 sum(1)(2)(5)(10) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u043e 17. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getAnagrams getAnagrams(\u201c\u043d\u043e\u0441\u201d, \u201c\u0441\u043e\u043d\u201d, \u201c\u0441\u043d\u0435\u0434\u044c\u201d, \u201c\u0434\u043d\u0435\u0441\u044c\u201d) \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c [ [\"\u043d\u043e\u0441\", \"\u0441\u043e\u043d\"], [\"\u0434\u043d\u0435\u0441\u044c\", \"\u0441\u043d\u0435\u0434\u044c\"] ] https://github.com/protasovse/yandex_interview_python https://github.com/Gooogr/Yandex_interview_tasks https://github.com/soar/yandex-log-analyzer","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/algorithms/tasks/#_1","text":"https://m.habr.com/ru/company/yandex/blog/340784/ https://m.habr.com/ru/company/yandex/blog/337690/ \u0415\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u043f\u043e\u043c\u043d\u044e: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getPrimes(n) // \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 2 \u0434\u043e n; \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0443\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438; check(\"{()}[]\") // true check(\"{[}]\") // false 3. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e sum \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 sum(1)(2)(5)(10) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u043e 17. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getAnagrams getAnagrams(\u201c\u043d\u043e\u0441\u201d, \u201c\u0441\u043e\u043d\u201d, \u201c\u0441\u043d\u0435\u0434\u044c\u201d, \u201c\u0434\u043d\u0435\u0441\u044c\u201d) \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c [ [\"\u043d\u043e\u0441\", \"\u0441\u043e\u043d\"], [\"\u0434\u043d\u0435\u0441\u044c\", \"\u0441\u043d\u0435\u0434\u044c\"] ] https://github.com/protasovse/yandex_interview_python https://github.com/Gooogr/Yandex_interview_tasks https://github.com/soar/yandex-log-analyzer","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/algorithms/implementations/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430 Python \u00b6 \u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u00b6 Bisection Gaussian Elimination In Static Equilibrium Intersection Lu Decomposition Newton Forward Interpolation Newton Method Newton Raphson Secant Method \u041f\u043e\u0438\u0441\u043a \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c (Backtracking) \u00b6 All Combinations All Permutations All Subsequences Coloring Hamiltonian Cycle Knight Tour Minimax N Queens N Queens Math Rat In Maze Sudoku Sum Of Subsets \u0411\u0438\u0442\u043e\u0432\u0430\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u044f \u00b6 Binary And Operator Binary Or Operator Binary Xor Operator \u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u00b6 Chinese Remainder Theorem Diophantine Equation Modular Division \u0410\u043b\u0433\u0435\u0431\u0440\u0430 \u043b\u043e\u0433\u0438\u043a\u0438 \u00b6 Quine Mc Cluskey \u041a\u043b\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u044b \u00b6 One Dimensional \u0428\u0438\u0444\u0440\u044b \u00b6 A1Z26 Affine Cipher Atbash Base16 Base32 Base64 Cipher Base85 Brute Force Caesar Cipher Caesar Cipher Cryptomath Module Decrypt Caesar With Chi Squared Deterministic Miller Rabin Diffie Elgamal Key Generator Enigma Machine2 Hill Cipher Mixed Keyword Cypher Morse Code Implementation Onepad Cipher Playfair Cipher Porta Cipher Rabin Miller Rail Fence Cipher Rot13 Rsa Cipher Rsa Factorization Rsa Key Generator Shuffled Shift Cipher Simple Keyword Cypher Simple Substitution Cipher Trafid Cipher Transposition Cipher Transposition Cipher Encrypt Decrypt File Vigenere Cipher Xor Cipher \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0421\u0436\u0430\u0442\u0438\u044f \u00b6 Burrows Wheeler Huffman Lempel Ziv Lempel Ziv Decompress Peak Signal To Noise Ratio \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 \u00b6 Harriscorner \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u00b6 Binary To Decimal Binary To Octal Decimal To Any Decimal To Binary Decimal To Binary Recursion Decimal To Hexadecimal Decimal To Octal Hexadecimal To Decimal Prefix Conversions Roman To Integer Temperature Conversions \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u0414\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (Binary Tree) Avl Tree Basic Binary Tree Binary Search Tree Binary Search Tree Recursive Binary Tree Mirror Fenwick Tree Lazy Segment Tree Lowest Common Ancestor Non Recursive Segment Tree Number Of Possible Binary Trees Red Black Tree Segment Tree Segment Tree Other Treap \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 (Disjoint Set) Alternate Disjoint Set Disjoint Set \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Hashing) Double Hash Hash Table Hash Table With Linked List \u0422\u0435\u043e\u0440\u0438\u044f \u0427\u0438\u0441\u0435\u043b (Number Theory) Prime Numbers Quadratic Probing \u041a\u0443\u0447\u0430 (Heap) Binomial Heap Heap Heap Generic Max Heap Min Heap Randomized Heap \u0421\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 (Linked List) Circular Linked List Deque Doubly Doubly Linked List From Sequence Has Loop Is Palindrome Middle Element Of Linked List Print Reverse Singly Linked List Skip List Swap Nodes \u041e\u0447\u0435\u0440\u0435\u0434\u0438 (Queue) Circular Queue Double Ended Queue Linked Queue Priority Queue Using List Queue On List Queue On Pseudo Stack \u0421\u0442\u0435\u043a\u0438 (Stacks) Balanced Parentheses Dijkstras Two Stack Algorithm Infix To Postfix Conversion Infix To Prefix Conversion Linked Stack Next Greater Element Postfix Evaluation Prefix Evaluation Stack Stack Using Dll Stock Span Problem \u041f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (Trie) Trie \u0426\u0438\u0444\u0440\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u00b6 Change Brightness Change Contrast Convert To Negative \u0414\u0438\u0437\u0435\u0440\u0438\u043d\u0433 (Dithering) Burkes \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 (Edge Detection) Canny \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f (Filters) Bilateral Filter Convolve Gaussian Filter Median Filter Sobel Filter \u042d\u043a\u0432\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c (Histogram Equalization) Histogram Stretch Index Calculation \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 (Resize) Resize \u0412\u0440\u0430\u0449\u0435\u043d\u0438\u0435 (Rotation) Rotation Sepia Test Digital Image Processing \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u0438 \u0412\u043b\u0430\u0432\u0441\u0442\u0432\u0443\u0439 (Divide And Conquer) \u00b6 Closest Pair Of Points Convex Hull Heaps Algorithm Heaps Algorithm Iterative Inversions Max Subarray Sum Mergesort Power Strassen Matrix Multiplication \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 Abbreviation Bitmask Climbing Stairs Coin Change Edit Distance Factorial Fast Fibonacci Fibonacci Floyd Warshall Fractional Knapsack Fractional Knapsack 2 Integer Partition Iterating Through Submasks Knapsack Longest Common Subsequence Longest Increasing Subsequence Longest Increasing Subsequence O(Nlogn) Longest Sub Array Matrix Chain Order Max Non Adjacent Sum Max Sub Array Max Sum Contiguous Subsequence Minimum Cost Path Minimum Partition Optimal Binary Search Tree Rod Cutting Subset Generation Sum Of Subset \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u00b6 Receive File Send File Tests Test Send File \u041d\u0435\u0447\u0451\u0442\u043a\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u00b6 Fuzzy Operations \u0413\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 Basic String \u0413\u0435\u043e\u0434\u0435\u0437\u0438\u044f \u00b6 Haversine Distance Lamberts Ellipsoidal Distance \u0413\u0440\u0430\u0444\u0438\u043a\u0430 \u00b6 Bezier Curve Vector3 For 2D Rendering \u0413\u0440\u0430\u0444\u044b \u00b6 A Star Articulation Points Basic Graphs Bellman Ford Bfs Shortest Path Bidirectional A Star Bidirectional Breadth First Search Breadth First Search Breadth First Search 2 Breadth First Search Shortest Path Check Bipartite Graph Bfs Check Bipartite Graph Dfs Connected Components Depth First Search Depth First Search 2 Dijkstra Dijkstra 2 Dijkstra Algorithm Dinic Directed And Undirected (Weighted) Graph Edmonds Karp Multiple Source And Sink Eulerian Path And Circuit For Undirected Graph Even Tree Finding Bridges Frequent Pattern Graph Miner G Topological Sort Gale Shapley Bigraph Graph List Graph Matrix Graphs Floyd Warshall Greedy Best First Kahns Algorithm Long Kahns Algorithm Topo Karger Minimum Spanning Tree Boruvka Minimum Spanning Tree Kruskal Minimum Spanning Tree Kruskal2 Minimum Spanning Tree Prims Minimum Spanning Tree Prims2 Multi Heuristic Astar Page Rank Prim Scc Kosaraju Strongly Connected Components Tarjans Scc Tests Test Min Spanning Tree Kruskal \u0416\u0430\u0434\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b (Greedy Method) \u00b6 Greedy Knapsack Test Knapsack \u0425\u0435\u0448\u0438 \u00b6 Adler32 Chaos Machine Djb2 Enigma Machine Hamming Code Md5 Sdbm Sha1 \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430 \u00b6 Src Lib Polynom For Points Power Iteration Rayleigh Quotient Test Linear Algebra Transformations 2D \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u00b6 Astar Data Transformations Decision Tree Gaussian Naive Bayes Gradient Boosting Regressor Gradient Descent K Means Clust K Nearest Neighbours Knn Sklearn Linear Discriminant Analysis Linear Regression Logistic Regression Lstm Lstm Prediction Multilayer Perceptron Classifier Polymonial Regression Random Forest Classifier Random Forest Regressor Scoring Functions Sequential Minimum Optimization Support Vector Machines Word Frequency Functions \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u00b6 3N Plus 1 Abs Abs Max Abs Min Add Aliquot Sum Allocation Number Area Area Under Curve Armstrong Numbers Average Mean Average Median Average Mode Bailey Borwein Plouffe Basic Maths Binary Exp Mod Binary Exponentiation Binomial Coefficient Binomial Distribution Bisection Ceil Chudnovsky Algorithm Collatz Sequence Combinations Entropy Eulers Totient Explicit Euler Extended Euclidean Algorithm Factorial Iterative Factorial Python Factorial Recursive Factors Fermat Little Theorem Fibonacci Fibonacci Sequence Recursion Find Max Find Max Recursion Find Min Find Min Recursion Floor Gamma Gaussian Greatest Common Divisor Hardy Ramanujanalgo Is Square Free Jaccard Similarity Kadanes Karatsuba Krishnamurthy Number Kth Lexicographic Permutation Largest Of Very Large Numbers Least Common Multiple Line Length Lucas Lehmer Primality Test Lucas Series Matrix Exponentiation Miller Rabin Mobius Function Modular Exponential Monte Carlo Monte Carlo Dice Newton Raphson Number Of Digits Numerical Integration Perfect Cube Perfect Number Perfect Square Pi Monte Carlo Estimation Polynomial Evaluation Power Using Recursion Prime Check Prime Factors Prime Numbers Prime Sieve Eratosthenes Pythagoras Qr Decomposition Quadratic Equations Complex Numbers Radians Radix2 Fft Relu Runge Kutta Segmented Sieve \u0420\u044f\u0434\u044b Geometric Series Harmonic Series P Series Sieve Of Eratosthenes Simpson Rule Softmax Square Root Sum Of Arithmetic Series Sum Of Digits Sum Of Geometric Progression Test Prime Check Trapezoidal Rule Ugly Numbers Volume Zellers Congruence \u041c\u0430\u0442\u0440\u0438\u0446\u044b \u00b6 Count Islands In Matrix Inverse Of Matrix Matrix Class Matrix Operation Nth Fibonacci Using Matrix Exponentiation Rotate Matrix Searching In Sorted Matrix Sherman Morrison Spiral Print Tests Test Matrix Operation \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u00b6 Ford Fulkerson Minimum Cut \u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u00b6 Back Propagation Neural Network Convolution Neural Network Perceptron \u0414\u0440\u0443\u0433\u043e\u0435 \u00b6 Activity Selection Anagrams Autocomplete Using Trie Binary Exponentiation Binary Exponentiation 2 Detecting English Programmatically Dijkstra Bankers Algorithm Doomsday Euclidean Gcd Fischer Yates Shuffle Frequency Finder Game Of Life Gauss Easter Greedy Integeration By Simpson Approx Largest Subarray Sum Least Recently Used Lfu Cache Linear Congruential Generator Lru Cache Magicdiamondpattern Markov Chain Max Sum Sliding Window Nested Brackets Palindrome Password Generator Primelib Scoring Algorithm Sdes Sierpinski Triangle Tower Of Hanoi Triplet Sum Two Sum Word Patterns \u041f\u0440\u043e\u0435\u043a\u0442 \u042d\u0439\u043b\u0435\u0440 (Project Euler) \u00b6 Problem 01 Sol1 Sol2 Sol3 Sol4 Sol5 Sol6 Sol7 Problem 02 Sol1 Sol2 Sol3 Sol4 Sol5 Problem 03 Sol1 Sol2 Sol3 Problem 04 Sol1 Sol2 Problem 05 Sol1 Sol2 Problem 06 Sol1 Sol2 Sol3 Sol4 Problem 07 Sol1 Sol2 Sol3 Problem 08 Sol1 Sol2 Sol3 Problem 09 Sol1 Sol2 Sol3 Problem 10 Sol1 Sol2 Sol3 Problem 11 Sol1 Sol2 Problem 112 Sol1 Problem 119 Sol1 Problem 12 Sol1 Sol2 Problem 120 Sol1 Problem 125 Sol1 Problem 13 Sol1 Problem 14 Sol1 Sol2 Problem 15 Sol1 Problem 16 Sol1 Sol2 Problem 17 Sol1 Problem 18 Solution Problem 19 Sol1 Problem 191 Sol1 Problem 20 Sol1 Sol2 Sol3 Sol4 Problem 21 Sol1 Problem 22 Sol1 Sol2 Problem 23 Sol1 Problem 234 Sol1 Problem 24 Sol1 Problem 25 Sol1 Sol2 Sol3 Problem 26 Sol1 Problem 27 Sol1 Problem 28 Sol1 Problem 29 Sol1 Problem 30 Sol1 Problem 31 Sol1 Sol2 Problem 32 Sol32 Problem 33 Sol1 Problem 34 Sol1 Problem 35 Sol1 Problem 36 Sol1 Problem 37 Sol1 Problem 39 Sol1 Problem 40 Sol1 Problem 41 Sol1 Problem 42 Solution42 Problem 43 Sol1 Problem 44 Sol1 Problem 45 Sol1 Problem 46 Sol1 Problem 47 Sol1 Problem 48 Sol1 Problem 49 Sol1 Problem 51 Sol1 Problem 52 Sol1 Problem 53 Sol1 Problem 54 Sol1 Test Poker Hand Problem 55 Sol1 Problem 551 Sol1 Problem 56 Sol1 Problem 63 Sol1 Problem 67 Sol1 Problem 69 Sol1 Problem 71 Sol1 Problem 72 Sol1 Problem 76 Sol1 Problem 80 Sol1 Problem 97 Sol1 Problem 99 Sol1 Validate Solutions \u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u00b6 Not Gate Quantum Entanglement Single Qubit Measure \u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 First Come First Served Round Robin Shortest Job First \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u0438\u0441\u043a\u0430 \u00b6 Binary Search Double Linear Search Double Linear Search Recursion Fibonacci Search Hill Climbing Interpolation Search Jump Search Linear Search Quick Select Sentinel Linear Search Simple Binary Search Simulated Annealing Tabu Search Ternary Search \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u00b6 Bead Sort Bitonic Sort Bogo Sort \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) Bucket Sort Cocktail Shaker Sort Comb Sort Counting Sort Cycle Sort Double Sort External Sort Gnome Sort Heap Sort Insertion Sort Iterative Merge Sort Merge Insertion Sort Merge Sort Odd Even Transposition Parallel Odd Even Transposition Single Threaded Pancake Sort Pigeon Sort Pigeonhole Sort Quick Sort Quick Sort 3 Partition Radix Sort Random Normal Distribution Quicksort Random Pivot Quick Sort Recursive Bubble Sort Recursive Insertion Sort Recursive Quick Sort Selection Sort Shell Sort Stooge Sort Strand Sort Tim Sort Topological Sort Tree Sort Unknown Sort Wiggle Sort \u0421\u0442\u0440\u043e\u043a\u0438 \u00b6 Aho Corasick Boyer Moore Search Can String Be Rearranged As Palindrome Capitalize Check Anagrams Check Pangram Is Palindrome Jaro Winkler Knuth Morris Pratt Levenshtein Distance Lower Manacher Min Cost String Conversion Naive String Search Prefix Function Rabin Karp Remove Duplicate Reverse Words Split Upper Word Occurrence Z Function \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0445\u043e\u0434\u0430 \u00b6 Binary Tree Traversals \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u00b6 Co2 Emission Covid Stats Via Xpath Crawl Google Results Current Stock Price Current Weather Daily Horoscope Emails From Url Fetch Bbc News Fetch Github Info Fetch Jobs Get Imdb Top 250 Movies Csv Get Imdbtop Instagram Crawler Recaptcha Verification Slack Message World Covid19 Stats","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/implementations/#python","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430 Python"},{"location":"content/algorithms/implementations/#_1","text":"Bisection Gaussian Elimination In Static Equilibrium Intersection Lu Decomposition Newton Forward Interpolation Newton Method Newton Raphson Secant Method","title":"\u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437"},{"location":"content/algorithms/implementations/#backtracking","text":"All Combinations All Permutations All Subsequences Coloring Hamiltonian Cycle Knight Tour Minimax N Queens N Queens Math Rat In Maze Sudoku Sum Of Subsets","title":"\u041f\u043e\u0438\u0441\u043a \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c (Backtracking)"},{"location":"content/algorithms/implementations/#_2","text":"Binary And Operator Binary Or Operator Binary Xor Operator","title":"\u0411\u0438\u0442\u043e\u0432\u0430\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u044f"},{"location":"content/algorithms/implementations/#_3","text":"Chinese Remainder Theorem Diophantine Equation Modular Division","title":"\u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d"},{"location":"content/algorithms/implementations/#_4","text":"Quine Mc Cluskey","title":"\u0410\u043b\u0433\u0435\u0431\u0440\u0430 \u043b\u043e\u0433\u0438\u043a\u0438"},{"location":"content/algorithms/implementations/#_5","text":"One Dimensional","title":"\u041a\u043b\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u044b"},{"location":"content/algorithms/implementations/#_6","text":"A1Z26 Affine Cipher Atbash Base16 Base32 Base64 Cipher Base85 Brute Force Caesar Cipher Caesar Cipher Cryptomath Module Decrypt Caesar With Chi Squared Deterministic Miller Rabin Diffie Elgamal Key Generator Enigma Machine2 Hill Cipher Mixed Keyword Cypher Morse Code Implementation Onepad Cipher Playfair Cipher Porta Cipher Rabin Miller Rail Fence Cipher Rot13 Rsa Cipher Rsa Factorization Rsa Key Generator Shuffled Shift Cipher Simple Keyword Cypher Simple Substitution Cipher Trafid Cipher Transposition Cipher Transposition Cipher Encrypt Decrypt File Vigenere Cipher Xor Cipher","title":"\u0428\u0438\u0444\u0440\u044b"},{"location":"content/algorithms/implementations/#_7","text":"Burrows Wheeler Huffman Lempel Ziv Lempel Ziv Decompress Peak Signal To Noise Ratio","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0421\u0436\u0430\u0442\u0438\u044f"},{"location":"content/algorithms/implementations/#_8","text":"Harriscorner","title":"\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_9","text":"Binary To Decimal Binary To Octal Decimal To Any Decimal To Binary Decimal To Binary Recursion Decimal To Hexadecimal Decimal To Octal Hexadecimal To Decimal Prefix Conversions Roman To Integer Temperature Conversions","title":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f"},{"location":"content/algorithms/implementations/#_10","text":"\u0414\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (Binary Tree) Avl Tree Basic Binary Tree Binary Search Tree Binary Search Tree Recursive Binary Tree Mirror Fenwick Tree Lazy Segment Tree Lowest Common Ancestor Non Recursive Segment Tree Number Of Possible Binary Trees Red Black Tree Segment Tree Segment Tree Other Treap \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 (Disjoint Set) Alternate Disjoint Set Disjoint Set \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Hashing) Double Hash Hash Table Hash Table With Linked List \u0422\u0435\u043e\u0440\u0438\u044f \u0427\u0438\u0441\u0435\u043b (Number Theory) Prime Numbers Quadratic Probing \u041a\u0443\u0447\u0430 (Heap) Binomial Heap Heap Heap Generic Max Heap Min Heap Randomized Heap \u0421\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 (Linked List) Circular Linked List Deque Doubly Doubly Linked List From Sequence Has Loop Is Palindrome Middle Element Of Linked List Print Reverse Singly Linked List Skip List Swap Nodes \u041e\u0447\u0435\u0440\u0435\u0434\u0438 (Queue) Circular Queue Double Ended Queue Linked Queue Priority Queue Using List Queue On List Queue On Pseudo Stack \u0421\u0442\u0435\u043a\u0438 (Stacks) Balanced Parentheses Dijkstras Two Stack Algorithm Infix To Postfix Conversion Infix To Prefix Conversion Linked Stack Next Greater Element Postfix Evaluation Prefix Evaluation Stack Stack Using Dll Stock Span Problem \u041f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (Trie) Trie","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/implementations/#_11","text":"Change Brightness Change Contrast Convert To Negative \u0414\u0438\u0437\u0435\u0440\u0438\u043d\u0433 (Dithering) Burkes \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 (Edge Detection) Canny \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f (Filters) Bilateral Filter Convolve Gaussian Filter Median Filter Sobel Filter \u042d\u043a\u0432\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c (Histogram Equalization) Histogram Stretch Index Calculation \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 (Resize) Resize \u0412\u0440\u0430\u0449\u0435\u043d\u0438\u0435 (Rotation) Rotation Sepia Test Digital Image Processing","title":"\u0426\u0438\u0444\u0440\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"},{"location":"content/algorithms/implementations/#divide-and-conquer","text":"Closest Pair Of Points Convex Hull Heaps Algorithm Heaps Algorithm Iterative Inversions Max Subarray Sum Mergesort Power Strassen Matrix Multiplication","title":"\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u0438 \u0412\u043b\u0430\u0432\u0441\u0442\u0432\u0443\u0439 (Divide And Conquer)"},{"location":"content/algorithms/implementations/#_12","text":"Abbreviation Bitmask Climbing Stairs Coin Change Edit Distance Factorial Fast Fibonacci Fibonacci Floyd Warshall Fractional Knapsack Fractional Knapsack 2 Integer Partition Iterating Through Submasks Knapsack Longest Common Subsequence Longest Increasing Subsequence Longest Increasing Subsequence O(Nlogn) Longest Sub Array Matrix Chain Order Max Non Adjacent Sum Max Sub Array Max Sum Contiguous Subsequence Minimum Cost Path Minimum Partition Optimal Binary Search Tree Rod Cutting Subset Generation Sum Of Subset","title":"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_13","text":"Receive File Send File Tests Test Send File","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"content/algorithms/implementations/#_14","text":"Fuzzy Operations","title":"\u041d\u0435\u0447\u0451\u0442\u043a\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_15","text":"Basic String","title":"\u0413\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/algorithms/implementations/#_16","text":"Haversine Distance Lamberts Ellipsoidal Distance","title":"\u0413\u0435\u043e\u0434\u0435\u0437\u0438\u044f"},{"location":"content/algorithms/implementations/#_17","text":"Bezier Curve Vector3 For 2D Rendering","title":"\u0413\u0440\u0430\u0444\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_18","text":"A Star Articulation Points Basic Graphs Bellman Ford Bfs Shortest Path Bidirectional A Star Bidirectional Breadth First Search Breadth First Search Breadth First Search 2 Breadth First Search Shortest Path Check Bipartite Graph Bfs Check Bipartite Graph Dfs Connected Components Depth First Search Depth First Search 2 Dijkstra Dijkstra 2 Dijkstra Algorithm Dinic Directed And Undirected (Weighted) Graph Edmonds Karp Multiple Source And Sink Eulerian Path And Circuit For Undirected Graph Even Tree Finding Bridges Frequent Pattern Graph Miner G Topological Sort Gale Shapley Bigraph Graph List Graph Matrix Graphs Floyd Warshall Greedy Best First Kahns Algorithm Long Kahns Algorithm Topo Karger Minimum Spanning Tree Boruvka Minimum Spanning Tree Kruskal Minimum Spanning Tree Kruskal2 Minimum Spanning Tree Prims Minimum Spanning Tree Prims2 Multi Heuristic Astar Page Rank Prim Scc Kosaraju Strongly Connected Components Tarjans Scc Tests Test Min Spanning Tree Kruskal","title":"\u0413\u0440\u0430\u0444\u044b"},{"location":"content/algorithms/implementations/#greedy-method","text":"Greedy Knapsack Test Knapsack","title":"\u0416\u0430\u0434\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b (Greedy Method)"},{"location":"content/algorithms/implementations/#_19","text":"Adler32 Chaos Machine Djb2 Enigma Machine Hamming Code Md5 Sdbm Sha1","title":"\u0425\u0435\u0448\u0438"},{"location":"content/algorithms/implementations/#_20","text":"Src Lib Polynom For Points Power Iteration Rayleigh Quotient Test Linear Algebra Transformations 2D","title":"\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430"},{"location":"content/algorithms/implementations/#_21","text":"Astar Data Transformations Decision Tree Gaussian Naive Bayes Gradient Boosting Regressor Gradient Descent K Means Clust K Nearest Neighbours Knn Sklearn Linear Discriminant Analysis Linear Regression Logistic Regression Lstm Lstm Prediction Multilayer Perceptron Classifier Polymonial Regression Random Forest Classifier Random Forest Regressor Scoring Functions Sequential Minimum Optimization Support Vector Machines Word Frequency Functions","title":"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_22","text":"3N Plus 1 Abs Abs Max Abs Min Add Aliquot Sum Allocation Number Area Area Under Curve Armstrong Numbers Average Mean Average Median Average Mode Bailey Borwein Plouffe Basic Maths Binary Exp Mod Binary Exponentiation Binomial Coefficient Binomial Distribution Bisection Ceil Chudnovsky Algorithm Collatz Sequence Combinations Entropy Eulers Totient Explicit Euler Extended Euclidean Algorithm Factorial Iterative Factorial Python Factorial Recursive Factors Fermat Little Theorem Fibonacci Fibonacci Sequence Recursion Find Max Find Max Recursion Find Min Find Min Recursion Floor Gamma Gaussian Greatest Common Divisor Hardy Ramanujanalgo Is Square Free Jaccard Similarity Kadanes Karatsuba Krishnamurthy Number Kth Lexicographic Permutation Largest Of Very Large Numbers Least Common Multiple Line Length Lucas Lehmer Primality Test Lucas Series Matrix Exponentiation Miller Rabin Mobius Function Modular Exponential Monte Carlo Monte Carlo Dice Newton Raphson Number Of Digits Numerical Integration Perfect Cube Perfect Number Perfect Square Pi Monte Carlo Estimation Polynomial Evaluation Power Using Recursion Prime Check Prime Factors Prime Numbers Prime Sieve Eratosthenes Pythagoras Qr Decomposition Quadratic Equations Complex Numbers Radians Radix2 Fft Relu Runge Kutta Segmented Sieve \u0420\u044f\u0434\u044b Geometric Series Harmonic Series P Series Sieve Of Eratosthenes Simpson Rule Softmax Square Root Sum Of Arithmetic Series Sum Of Digits Sum Of Geometric Progression Test Prime Check Trapezoidal Rule Ugly Numbers Volume Zellers Congruence","title":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_23","text":"Count Islands In Matrix Inverse Of Matrix Matrix Class Matrix Operation Nth Fibonacci Using Matrix Exponentiation Rotate Matrix Searching In Sorted Matrix Sherman Morrison Spiral Print Tests Test Matrix Operation","title":"\u041c\u0430\u0442\u0440\u0438\u0446\u044b"},{"location":"content/algorithms/implementations/#_24","text":"Ford Fulkerson Minimum Cut","title":"\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"},{"location":"content/algorithms/implementations/#_25","text":"Back Propagation Neural Network Convolution Neural Network Perceptron","title":"\u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"},{"location":"content/algorithms/implementations/#_26","text":"Activity Selection Anagrams Autocomplete Using Trie Binary Exponentiation Binary Exponentiation 2 Detecting English Programmatically Dijkstra Bankers Algorithm Doomsday Euclidean Gcd Fischer Yates Shuffle Frequency Finder Game Of Life Gauss Easter Greedy Integeration By Simpson Approx Largest Subarray Sum Least Recently Used Lfu Cache Linear Congruential Generator Lru Cache Magicdiamondpattern Markov Chain Max Sum Sliding Window Nested Brackets Palindrome Password Generator Primelib Scoring Algorithm Sdes Sierpinski Triangle Tower Of Hanoi Triplet Sum Two Sum Word Patterns","title":"\u0414\u0440\u0443\u0433\u043e\u0435"},{"location":"content/algorithms/implementations/#project-euler","text":"Problem 01 Sol1 Sol2 Sol3 Sol4 Sol5 Sol6 Sol7 Problem 02 Sol1 Sol2 Sol3 Sol4 Sol5 Problem 03 Sol1 Sol2 Sol3 Problem 04 Sol1 Sol2 Problem 05 Sol1 Sol2 Problem 06 Sol1 Sol2 Sol3 Sol4 Problem 07 Sol1 Sol2 Sol3 Problem 08 Sol1 Sol2 Sol3 Problem 09 Sol1 Sol2 Sol3 Problem 10 Sol1 Sol2 Sol3 Problem 11 Sol1 Sol2 Problem 112 Sol1 Problem 119 Sol1 Problem 12 Sol1 Sol2 Problem 120 Sol1 Problem 125 Sol1 Problem 13 Sol1 Problem 14 Sol1 Sol2 Problem 15 Sol1 Problem 16 Sol1 Sol2 Problem 17 Sol1 Problem 18 Solution Problem 19 Sol1 Problem 191 Sol1 Problem 20 Sol1 Sol2 Sol3 Sol4 Problem 21 Sol1 Problem 22 Sol1 Sol2 Problem 23 Sol1 Problem 234 Sol1 Problem 24 Sol1 Problem 25 Sol1 Sol2 Sol3 Problem 26 Sol1 Problem 27 Sol1 Problem 28 Sol1 Problem 29 Sol1 Problem 30 Sol1 Problem 31 Sol1 Sol2 Problem 32 Sol32 Problem 33 Sol1 Problem 34 Sol1 Problem 35 Sol1 Problem 36 Sol1 Problem 37 Sol1 Problem 39 Sol1 Problem 40 Sol1 Problem 41 Sol1 Problem 42 Solution42 Problem 43 Sol1 Problem 44 Sol1 Problem 45 Sol1 Problem 46 Sol1 Problem 47 Sol1 Problem 48 Sol1 Problem 49 Sol1 Problem 51 Sol1 Problem 52 Sol1 Problem 53 Sol1 Problem 54 Sol1 Test Poker Hand Problem 55 Sol1 Problem 551 Sol1 Problem 56 Sol1 Problem 63 Sol1 Problem 67 Sol1 Problem 69 Sol1 Problem 71 Sol1 Problem 72 Sol1 Problem 76 Sol1 Problem 80 Sol1 Problem 97 Sol1 Problem 99 Sol1 Validate Solutions","title":"\u041f\u0440\u043e\u0435\u043a\u0442 \u042d\u0439\u043b\u0435\u0440 (Project Euler)"},{"location":"content/algorithms/implementations/#_27","text":"Not Gate Quantum Entanglement Single Qubit Measure","title":"\u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"},{"location":"content/algorithms/implementations/#_28","text":"First Come First Served Round Robin Shortest Job First","title":"\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_29","text":"Binary Search Double Linear Search Double Linear Search Recursion Fibonacci Search Hill Climbing Interpolation Search Jump Search Linear Search Quick Select Sentinel Linear Search Simple Binary Search Simulated Annealing Tabu Search Ternary Search","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u0438\u0441\u043a\u0430"},{"location":"content/algorithms/implementations/#_30","text":"Bead Sort Bitonic Sort Bogo Sort \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) Bucket Sort Cocktail Shaker Sort Comb Sort Counting Sort Cycle Sort Double Sort External Sort Gnome Sort Heap Sort Insertion Sort Iterative Merge Sort Merge Insertion Sort Merge Sort Odd Even Transposition Parallel Odd Even Transposition Single Threaded Pancake Sort Pigeon Sort Pigeonhole Sort Quick Sort Quick Sort 3 Partition Radix Sort Random Normal Distribution Quicksort Random Pivot Quick Sort Recursive Bubble Sort Recursive Insertion Sort Recursive Quick Sort Selection Sort Shell Sort Stooge Sort Strand Sort Tim Sort Topological Sort Tree Sort Unknown Sort Wiggle Sort","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438"},{"location":"content/algorithms/implementations/#_31","text":"Aho Corasick Boyer Moore Search Can String Be Rearranged As Palindrome Capitalize Check Anagrams Check Pangram Is Palindrome Jaro Winkler Knuth Morris Pratt Levenshtein Distance Lower Manacher Min Cost String Conversion Naive String Search Prefix Function Rabin Karp Remove Duplicate Reverse Words Split Upper Word Occurrence Z Function","title":"\u0421\u0442\u0440\u043e\u043a\u0438"},{"location":"content/algorithms/implementations/#_32","text":"Binary Tree Traversals","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0445\u043e\u0434\u0430"},{"location":"content/algorithms/implementations/#-","text":"Co2 Emission Covid Stats Via Xpath Crawl Google Results Current Stock Price Current Weather Daily Horoscope Emails From Url Fetch Bbc News Fetch Github Info Fetch Jobs Get Imdb Top 250 Movies Csv Get Imdbtop Instagram Crawler Recaptcha Verification Slack Message World Covid19 Stats","title":"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"content/algorithms/implementations/bit_manipulation/","text":"https://wiki.python.org/moin/BitManipulation https://wiki.python.org/moin/BitwiseOperators https://www.tutorialspoint.com/python3/bitwise_operators_example.htm","title":"Index"},{"location":"content/algorithms/implementations/cellular_automata/","text":"Cellular Automata \u00b6 https://en.wikipedia.org/wiki/Cellular_automaton https://mathworld.wolfram.com/ElementaryCellularAutomaton.html","title":"Cellular Automata"},{"location":"content/algorithms/implementations/cellular_automata/#cellular-automata","text":"https://en.wikipedia.org/wiki/Cellular_automaton https://mathworld.wolfram.com/ElementaryCellularAutomaton.html","title":"Cellular Automata"},{"location":"content/algorithms/implementations/computer_vision/","text":"Computer Vision \u00b6 Computer vision is a field of computer science that works on enabling computers to see, identify and process images in the same way that human vision does, and then provide appropriate output. It is like imparting human intelligence and instincts to a computer. Image processing and computer vision are a little different from each other. Image processing means applying some algorithms for transforming image from one form to the other like smoothing, contrasting, stretching, etc. While computer vision comes from modelling image processing using the techniques of machine learning, computer vision applies machine learning to recognize patterns for interpretation of images (much like the process of visual reasoning of human vision).","title":"Index"},{"location":"content/algorithms/implementations/computer_vision/#computer-vision","text":"Computer vision is a field of computer science that works on enabling computers to see, identify and process images in the same way that human vision does, and then provide appropriate output. It is like imparting human intelligence and instincts to a computer. Image processing and computer vision are a little different from each other. Image processing means applying some algorithms for transforming image from one form to the other like smoothing, contrasting, stretching, etc. While computer vision comes from modelling image processing using the techniques of machine learning, computer vision applies machine learning to recognize patterns for interpretation of images (much like the process of visual reasoning of human vision).","title":"Computer Vision"},{"location":"content/algorithms/implementations/linear_algebra/","text":"Linear algebra library for Python \u00b6 This module contains classes and functions for doing linear algebra. Overview \u00b6 class Vector \u00b6 - - This class represents a vector of arbitrary size and related operations. ** Overview about the methods : ** - constructor ( components : list ) : init the vector - set ( components : list ) : changes the vector components . - \\ _ \\ _str \\ _ \\ _ () : toString method - component ( i : int ): gets the i - th component ( start by 0 ) - \\ _ \\ _len \\ _ \\ _ () : gets the size / length of the vector ( number of components ) - euclidLength () : returns the eulidean length of the vector . - operator + : vector addition - operator - : vector subtraction - operator * : scalar multiplication and dot product - copy () : copies this vector and returns it . - changeComponent ( pos , value ) : changes the specified component . function zeroVector(dimension) returns a zero vector of 'dimension' function unitBasisVector(dimension,pos) returns a unit basis vector with a One at index 'pos' (indexing at 0) function axpy(scalar,vector1,vector2) computes the axpy operation function randomVector(N,a,b) returns a random vector of size N, with random integer components between 'a' and 'b'. class Matrix \u00b6 - - This class represents a matrix of arbitrary size and operations on it. ** Overview about the methods : ** - \\ _ \\ _str \\ _ \\ _ () : returns a string representation - operator * : implements the matrix vector multiplication implements the matrix - scalar multiplication . - changeComponent ( x , y , value ) : changes the specified component . - component ( x , y ) : returns the specified component . - width () : returns the width of the matrix - height () : returns the height of the matrix - determinate () : returns the determinate of the matrix if it is square - operator + : implements the matrix - addition . - operator - _ implements the matrix - subtraction function squareZeroMatrix(N) returns a square zero-matrix of dimension NxN function randomMatrix(W,H,a,b) returns a random matrix WxH with integer components between 'a' and 'b' Documentation \u00b6 This module uses docstrings to enable the use of Python's in-built help(...) function. For instance, try help(Vector) , help(unitBasisVector) , and help(CLASSNAME.METHODNAME) . Usage \u00b6 Import the module lib.py from the src directory into your project. Alternatively, you can directly use the Python bytecode file lib.pyc . Tests \u00b6 src/tests.py contains Python unit tests which can be run with python3 -m unittest -v .","title":"Linear algebra library for Python"},{"location":"content/algorithms/implementations/linear_algebra/#linear-algebra-library-for-python","text":"This module contains classes and functions for doing linear algebra.","title":"Linear algebra library for Python"},{"location":"content/algorithms/implementations/linear_algebra/#overview","text":"","title":"Overview"},{"location":"content/algorithms/implementations/linear_algebra/#class-vector","text":"- - This class represents a vector of arbitrary size and related operations. ** Overview about the methods : ** - constructor ( components : list ) : init the vector - set ( components : list ) : changes the vector components . - \\ _ \\ _str \\ _ \\ _ () : toString method - component ( i : int ): gets the i - th component ( start by 0 ) - \\ _ \\ _len \\ _ \\ _ () : gets the size / length of the vector ( number of components ) - euclidLength () : returns the eulidean length of the vector . - operator + : vector addition - operator - : vector subtraction - operator * : scalar multiplication and dot product - copy () : copies this vector and returns it . - changeComponent ( pos , value ) : changes the specified component . function zeroVector(dimension) returns a zero vector of 'dimension' function unitBasisVector(dimension,pos) returns a unit basis vector with a One at index 'pos' (indexing at 0) function axpy(scalar,vector1,vector2) computes the axpy operation function randomVector(N,a,b) returns a random vector of size N, with random integer components between 'a' and 'b'.","title":"class Vector"},{"location":"content/algorithms/implementations/linear_algebra/#class-matrix","text":"- - This class represents a matrix of arbitrary size and operations on it. ** Overview about the methods : ** - \\ _ \\ _str \\ _ \\ _ () : returns a string representation - operator * : implements the matrix vector multiplication implements the matrix - scalar multiplication . - changeComponent ( x , y , value ) : changes the specified component . - component ( x , y ) : returns the specified component . - width () : returns the width of the matrix - height () : returns the height of the matrix - determinate () : returns the determinate of the matrix if it is square - operator + : implements the matrix - addition . - operator - _ implements the matrix - subtraction function squareZeroMatrix(N) returns a square zero-matrix of dimension NxN function randomMatrix(W,H,a,b) returns a random matrix WxH with integer components between 'a' and 'b'","title":"class Matrix"},{"location":"content/algorithms/implementations/linear_algebra/#documentation","text":"This module uses docstrings to enable the use of Python's in-built help(...) function. For instance, try help(Vector) , help(unitBasisVector) , and help(CLASSNAME.METHODNAME) .","title":"Documentation"},{"location":"content/algorithms/implementations/linear_algebra/#usage","text":"Import the module lib.py from the src directory into your project. Alternatively, you can directly use the Python bytecode file lib.pyc .","title":"Usage"},{"location":"content/algorithms/implementations/linear_algebra/#tests","text":"src/tests.py contains Python unit tests which can be run with python3 -m unittest -v .","title":"Tests"},{"location":"content/algorithms/implementations/project_euler/","text":"ProjectEuler \u00b6 Problems are taken from https://projecteuler.net/. Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Project Euler is ideal for mathematicians who are learning to code. Here the efficiency of your code is also checked. I've tried to provide all the best possible solutions. For description of the problem statements, kindly visit https://projecteuler.net/show=all","title":"ProjectEuler"},{"location":"content/algorithms/implementations/project_euler/#projecteuler","text":"Problems are taken from https://projecteuler.net/. Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Project Euler is ideal for mathematicians who are learning to code. Here the efficiency of your code is also checked. I've tried to provide all the best possible solutions. For description of the problem statements, kindly visit https://projecteuler.net/show=all","title":"ProjectEuler"},{"location":"content/algorithms/implementations/quantum/","text":"Welcome to Quantum Algorithms \u00b6 Started at https://github.com/TheAlgorithms/Python/issues/1831 D-Wave: https://www.dwavesys.com and https://github.com/dwavesystems Google: https://research.google/teams/applied-science/quantum IBM: https://qiskit.org and https://github.com/Qiskit Rigetti: https://rigetti.com and https://github.com/rigetti","title":"Welcome to Quantum Algorithms"},{"location":"content/algorithms/implementations/quantum/#welcome-to-quantum-algorithms","text":"Started at https://github.com/TheAlgorithms/Python/issues/1831 D-Wave: https://www.dwavesys.com and https://github.com/dwavesystems Google: https://research.google/teams/applied-science/quantum IBM: https://qiskit.org and https://github.com/Qiskit Rigetti: https://rigetti.com and https://github.com/rigetti","title":"Welcome to Quantum Algorithms"},{"location":"content/algorithms/implementations/sorts/__init__/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"  init  "},{"location":"content/algorithms/implementations/sorts/__init__/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/__init__/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Bead sort"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Bitonic sort"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bogo_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Bogo sort"},{"location":"content/algorithms/implementations/sorts/bogo_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bogo_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort)"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#bubble-sort","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort)"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Bucket sort"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Cocktail shaker sort"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Comb sort"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/counting_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Counting sort"},{"location":"content/algorithms/implementations/sorts/counting_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/counting_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cycle_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Cycle sort"},{"location":"content/algorithms/implementations/sorts/cycle_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cycle_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/double_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Double sort"},{"location":"content/algorithms/implementations/sorts/double_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/double_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/external_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"External sort"},{"location":"content/algorithms/implementations/sorts/external_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/external_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/gnome_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Gnome sort"},{"location":"content/algorithms/implementations/sorts/gnome_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/gnome_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/heap_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Heap sort"},{"location":"content/algorithms/implementations/sorts/heap_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/heap_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Insertion sort"},{"location":"content/algorithms/implementations/sorts/insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/insertion_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Iterative merge sort"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Merge insertion sort"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Merge sort"},{"location":"content/algorithms/implementations/sorts/merge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Normal distribution quick sort"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Odd even transposition parallel"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Odd even transposition single threaded"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pancake_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Pancake sort"},{"location":"content/algorithms/implementations/sorts/pancake_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pancake_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Pigeon sort"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Pigeonhole sort"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Quick sort"},{"location":"content/algorithms/implementations/sorts/quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Quick sort 3 partition"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/radix_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Radix sort"},{"location":"content/algorithms/implementations/sorts/radix_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/radix_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Random normal distribution quicksort"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Random pivot quick sort"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Recursive bubble sort"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Recursive insertion sort"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Recursive quick sort"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/selection_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Selection sort"},{"location":"content/algorithms/implementations/sorts/selection_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/selection_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/shell_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Shell sort"},{"location":"content/algorithms/implementations/sorts/shell_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/shell_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/stooge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Stooge sort"},{"location":"content/algorithms/implementations/sorts/stooge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/stooge_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/strand_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Strand sort"},{"location":"content/algorithms/implementations/sorts/strand_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/strand_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tim_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Tim sort"},{"location":"content/algorithms/implementations/sorts/tim_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tim_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/topological_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Topological sort"},{"location":"content/algorithms/implementations/sorts/topological_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/topological_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tree_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Tree sort"},{"location":"content/algorithms/implementations/sorts/tree_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tree_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/unknown_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Unknown sort"},{"location":"content/algorithms/implementations/sorts/unknown_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/unknown_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Wiggle sort"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/theory/","text":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 \u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0414\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u0438\u044f \u00b6 \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c) - \u043f\u043e\u043d\u044f\u0442\u0438\u0435, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432: \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445?. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f). \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0432\u043d\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0442\u043e\u0447\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0435 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e, \u0442.\u043a. \u0440\u0430\u0431\u043e\u0442\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u044f\u0434\u0430 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u043d\u0430\u0431\u043e\u0440\u0430 \u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438 \u0442.\u0434. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u00b6 \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439: \u041e-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, O (\u00ab\u041e\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb); \u041e\u043c\u0435\u0433\u0430-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, \u03a9 (\u00ab\u041e\u043c\u0435\u0433\u0430\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \ud835\udc47(\ud835\udc5b)=\ud835\udc42(\ud835\udc41^2) \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043c\u0435\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 (\u00ab\u041e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0442 \u044d\u043d \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u00bb). \u041a\u0430\u0436\u0434\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f: \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f: \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u041f\u0440\u0438 \u043f\u043e\u043b\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (1), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (\ud835\udc41), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \ud835\udc42(\\frac{\ud835\udc41}{2})=\ud835\udc42(\ud835\udc41) \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0438 O -\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u00b6 \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0445\u043d\u044f\u044f (\u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f) \u043e\u0446\u0435\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0442\u0430\u0446\u0438\u0438 O-\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438: \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (1). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f, \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0437\u044f\u0442\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0434\u0440. \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0435\u0440\u0435\u043b\u0438\u0441\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0442.\u0434. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0443 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a ). \u041b\u0438\u043d\u0435\u0439\u043d\u043e-\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c, \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435, \u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \ud835\udc41 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c. \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41 2 ). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b (\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442.\u0434.). \u041d\u0430 \u0440\u0438\u0441\u0443\u043d\u043a\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 O -\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u041e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u00b6 \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u043d\u0430\u0442\u044c \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445; \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u0412 Python \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445), \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u00b6 \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O (\ud835\udc41). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(lst) O (1) lst.append(5) O (1) lst.pop() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst.pop(-1) lst.clear() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst = [] lst[a:b] O ( b - a ) lst.extend(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 list(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 lst1 == lst2 O (\ud835\udc41) lst[a:b] == ... O (\ud835\udc41) del lst[i] O (\ud835\udc41) lst.remove(...) O (\ud835\udc41) x in/not in lst O (\ud835\udc41) \u041f\u043e\u0438\u0441\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 lst.copy() O (\ud835\udc41) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst[:] lst.pop(i) O (\ud835\udc41) min(lst)/max(lst) O (\ud835\udc41) lst.reverse() O (\ud835\udc41) for item in lst O (\ud835\udc41) [item for item in lst] O (\ud835\udc41) lst.sort() O (\ud835\udc41 log\ud835\udc41) \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438 k * lst O ( k * N ) \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u00b6 \u041f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e O (1). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(s) O(1) s.add(5) O(1) x in/not in s O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.remove(5) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.discard(5) O(1) s.pop(i) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e s = set() set(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 s != t O(len(s)) s <= t O(len(s)) s => t O(len(t)) s | t O(len(s) + len(t)) s & t O(len(s) + len(t)) s - t O(len(s) + len(t)) s ^ t O(len(s) + len(t)) for item in s: O(N) {item for item in s} O(N) s.copy() O(N) \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u00b6 \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(1) . \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 d[k] O(1) d[k] = v O(1) len(d) O(1) del d[k] O(1) d.pop(k) O(1) d.popitem() O(1) d.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e d = {} \u0438\u043b\u0438 d = dict() d.keys() O(1) dict(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 for k in d: O(N) \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: keys(), values(), items() {k: v for k, v in d.items() O(N) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u043b\u0443\u0447\u0448\u0435. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u00b6 \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0437\u0430\u043a\u043e\u043d\u044b \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)+\ud835\udc54(\ud835\udc5b)) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u043c \u0438\u0437 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445: \ud835\udc42(\ud835\udc41)+\ud835\udc42(log\ud835\udc5b)=\ud835\udc42(\ud835\udc41+log\ud835\udc5b)=\ud835\udc42(\ud835\udc41) \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)=3\u22c5\ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc41) \u043f\u0440\u0438 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 if test : # O(t) block 1 # O(b1) else : block 2 # O(b2) \ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc61)+\ud835\udc5a\ud835\udc4e\ud835\udc65(\ud835\udc42(\ud835\udc4f1),\ud835\udc42(\ud835\udc4f2)) \u0417\u0430\u043a\u043e\u043d \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)\u22c5\ud835\udc54(\ud835\udc5b)) # \u041e\u0431\u0449\u0430\u044f O(N^2) for i in range ( N ): # O(N) for j in range ( N ): # O(N) \u0428\u043f\u0430\u0433\u0440\u0430\u043b\u043a\u0430 \u043f\u043e \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u00b6 \u041f\u043e\u0438\u0441\u043a \u00b6 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u00b6 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u041a\u0443\u0447\u0438 \u00b6 \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u043e\u0432 \u00b6 \u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d \u0433\u0440\u0430\u0444 \u0441 |V| \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 |E| \u0440\u0435\u0431\u0440\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u041d\u043e\u0442\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430 \u00b6 ( \u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430. \u0422\u0435\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u0430\u043a (\u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u0442\u0430\u043a \u0438 (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 (\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u0445\u0443, \u0442\u0430\u043a \u0438 \u0441\u043d\u0438\u0437\u0443). \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 \u03a9(N LogN) \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 O(N LogN) \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN (\u03a9(N LogN)) \u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c N LogN (O(n logn)) . f(x)=O(g(n)) \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e f \u0440\u0430\u0441\u0442\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 g \u043a\u043e\u0433\u0434\u0430 n \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u043a \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u043e\u0441\u0442\u0430 f(x) \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u043e\u0441\u0442\u0430 g(n) . f(x)=O(g(n)) . \u0417\u0434\u0435\u0441\u044c \u0442\u0435\u043c\u043f\u044b \u0440\u043e\u0441\u0442\u0430 \u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c g(n) . O \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c \u00b6 \u0417\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u00b6 Big O cheatsheet \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u042e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u0430 \u0417\u043d\u0430\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 http://e-maxx.ru/algo/ http://www.algolist.net/Algorithms/ https://habr.com/ru/post/156361/ https://habr.com/ru/post/196560/ https://github.com/stucchio/Python-LRU-cache","title":"\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_1","text":"\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0414\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/algorithms/theory/#_2","text":"\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c) - \u043f\u043e\u043d\u044f\u0442\u0438\u0435, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432: \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445?. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f). \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0432\u043d\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0442\u043e\u0447\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0435 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e, \u0442.\u043a. \u0440\u0430\u0431\u043e\u0442\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u044f\u0434\u0430 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u043d\u0430\u0431\u043e\u0440\u0430 \u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438 \u0442.\u0434. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u0438\u044f"},{"location":"content/algorithms/theory/#_3","text":"\u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439: \u041e-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, O (\u00ab\u041e\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb); \u041e\u043c\u0435\u0433\u0430-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, \u03a9 (\u00ab\u041e\u043c\u0435\u0433\u0430\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \ud835\udc47(\ud835\udc5b)=\ud835\udc42(\ud835\udc41^2) \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043c\u0435\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 (\u00ab\u041e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0442 \u044d\u043d \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u00bb). \u041a\u0430\u0436\u0434\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f: \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f: \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u041f\u0440\u0438 \u043f\u043e\u043b\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (1), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (\ud835\udc41), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \ud835\udc42(\\frac{\ud835\udc41}{2})=\ud835\udc42(\ud835\udc41)","title":"\u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u043e\u0442\u0430\u0446\u0438\u0438"},{"location":"content/algorithms/theory/#o-","text":"\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0445\u043d\u044f\u044f (\u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f) \u043e\u0446\u0435\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0442\u0430\u0446\u0438\u0438 O-\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438: \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (1). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f, \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0437\u044f\u0442\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0434\u0440. \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0435\u0440\u0435\u043b\u0438\u0441\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0442.\u0434. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0443 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a ). \u041b\u0438\u043d\u0435\u0439\u043d\u043e-\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c, \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435, \u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \ud835\udc41 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c. \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41 2 ). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b (\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442.\u0434.). \u041d\u0430 \u0440\u0438\u0441\u0443\u043d\u043a\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 O -\u0431\u043e\u043b\u044c\u0448\u043e\u0435.","title":"\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0438 O-\u043d\u043e\u0442\u0430\u0446\u0438\u044f"},{"location":"content/algorithms/theory/#_4","text":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u043d\u0430\u0442\u044c \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445; \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.","title":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_5","text":"\u0412 Python \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445), \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c.","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/theory/#_6","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O (\ud835\udc41). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(lst) O (1) lst.append(5) O (1) lst.pop() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst.pop(-1) lst.clear() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst = [] lst[a:b] O ( b - a ) lst.extend(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 list(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 lst1 == lst2 O (\ud835\udc41) lst[a:b] == ... O (\ud835\udc41) del lst[i] O (\ud835\udc41) lst.remove(...) O (\ud835\udc41) x in/not in lst O (\ud835\udc41) \u041f\u043e\u0438\u0441\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 lst.copy() O (\ud835\udc41) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst[:] lst.pop(i) O (\ud835\udc41) min(lst)/max(lst) O (\ud835\udc41) lst.reverse() O (\ud835\udc41) for item in lst O (\ud835\udc41) [item for item in lst] O (\ud835\udc41) lst.sort() O (\ud835\udc41 log\ud835\udc41) \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438 k * lst O ( k * N )","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u0440\u0442\u0435\u0436"},{"location":"content/algorithms/theory/#_7","text":"\u041f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e O (1). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(s) O(1) s.add(5) O(1) x in/not in s O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.remove(5) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.discard(5) O(1) s.pop(i) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e s = set() set(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 s != t O(len(s)) s <= t O(len(s)) s => t O(len(t)) s | t O(len(s) + len(t)) s & t O(len(s) + len(t)) s - t O(len(s) + len(t)) s ^ t O(len(s) + len(t)) for item in s: O(N) {item for item in s} O(N) s.copy() O(N)","title":"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e"},{"location":"content/algorithms/theory/#_8","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(1) . \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 d[k] O(1) d[k] = v O(1) len(d) O(1) del d[k] O(1) d.pop(k) O(1) d.popitem() O(1) d.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e d = {} \u0438\u043b\u0438 d = dict() d.keys() O(1) dict(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 for k in d: O(N) \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: keys(), values(), items() {k: v for k, v in d.items() O(N) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u043b\u0443\u0447\u0448\u0435.","title":"\u0421\u043b\u043e\u0432\u0430\u0440\u044c"},{"location":"content/algorithms/theory/#o-_1","text":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0437\u0430\u043a\u043e\u043d\u044b \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)+\ud835\udc54(\ud835\udc5b)) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u043c \u0438\u0437 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445: \ud835\udc42(\ud835\udc41)+\ud835\udc42(log\ud835\udc5b)=\ud835\udc42(\ud835\udc41+log\ud835\udc5b)=\ud835\udc42(\ud835\udc41) \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)=3\u22c5\ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc41) \u043f\u0440\u0438 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 if test : # O(t) block 1 # O(b1) else : block 2 # O(b2) \ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc61)+\ud835\udc5a\ud835\udc4e\ud835\udc65(\ud835\udc42(\ud835\udc4f1),\ud835\udc42(\ud835\udc4f2)) \u0417\u0430\u043a\u043e\u043d \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)\u22c5\ud835\udc54(\ud835\udc5b)) # \u041e\u0431\u0449\u0430\u044f O(N^2) for i in range ( N ): # O(N) for j in range ( N ): # O(N)","title":"\u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f  O-\u043d\u043e\u0442\u0430\u0446\u0438\u0438"},{"location":"content/algorithms/theory/#_9","text":"","title":"\u0428\u043f\u0430\u0433\u0440\u0430\u043b\u043a\u0430 \u043f\u043e \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_10","text":"","title":"\u041f\u043e\u0438\u0441\u043a"},{"location":"content/algorithms/theory/#_11","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"content/algorithms/theory/#_12","text":"","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/theory/#_13","text":"","title":"\u041a\u0443\u0447\u0438"},{"location":"content/algorithms/theory/#_14","text":"\u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d \u0433\u0440\u0430\u0444 \u0441 |V| \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 |E| \u0440\u0435\u0431\u0440\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u043e\u0432"},{"location":"content/algorithms/theory/#_15","text":"( \u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430. \u0422\u0435\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u0430\u043a (\u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u0442\u0430\u043a \u0438 (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 (\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u0445\u0443, \u0442\u0430\u043a \u0438 \u0441\u043d\u0438\u0437\u0443). \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 \u03a9(N LogN) \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 O(N LogN) \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN (\u03a9(N LogN)) \u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c N LogN (O(n logn)) . f(x)=O(g(n)) \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e f \u0440\u0430\u0441\u0442\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 g \u043a\u043e\u0433\u0434\u0430 n \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u043a \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u043e\u0441\u0442\u0430 f(x) \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u043e\u0441\u0442\u0430 g(n) . f(x)=O(g(n)) . \u0417\u0434\u0435\u0441\u044c \u0442\u0435\u043c\u043f\u044b \u0440\u043e\u0441\u0442\u0430 \u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c g(n) . O \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439.","title":"\u041d\u043e\u0442\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430"},{"location":"content/algorithms/theory/#_16","text":"\u0417\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c"},{"location":"content/algorithms/theory/#_17","text":"Big O cheatsheet \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u042e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u0430 \u0417\u043d\u0430\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 http://e-maxx.ru/algo/ http://www.algolist.net/Algorithms/ https://habr.com/ru/post/156361/ https://habr.com/ru/post/196560/ https://github.com/stucchio/Python-LRU-cache","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438"},{"location":"content/architecture/","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u00b6","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"content/architecture/#_1","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"content/datastructures/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 http://www.algolist.net/Data_structures/ https://www.interviewbit.com/courses/programming/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/datastructures/#_1","text":"http://www.algolist.net/Data_structures/ https://www.interviewbit.com/courses/programming/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/ipc_and_concurrency/","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u00b6 https://python-scripts.com/synchronization-between-threads","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435"},{"location":"content/ipc_and_concurrency/#_1","text":"https://python-scripts.com/synchronization-between-threads","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435"},{"location":"content/programming/","text":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 \u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0437\u043d\u0430\u043d\u0438\u044e \u044f\u0437\u044b\u043a\u0430, \u043d\u0430\u0432\u044b\u043a\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0441\u0442\u0438\u043b\u044f\u043c \u0438 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442.\u0434. \u041e\u0434\u043d\u043e \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a! \u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u044b \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438, \u0430 \u043d\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/programming/#_1","text":"\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0437\u043d\u0430\u043d\u0438\u044e \u044f\u0437\u044b\u043a\u0430, \u043d\u0430\u0432\u044b\u043a\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0441\u0442\u0438\u043b\u044f\u043c \u0438 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442.\u0434. \u041e\u0434\u043d\u043e \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a! \u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u044b \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438, \u0430 \u043d\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/programming/std/","text":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u00b6","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"content/programming/std/#_1","text":"","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"content/programming/tasks/","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u00b6","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/programming/tasks/#_1","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"}]}